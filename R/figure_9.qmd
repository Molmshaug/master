---
title: "figure_9"
format: pdf
editor_options: 
  chunk_output_type: console
---
```{r}
#| message: false
#| echo: false
library(tidyverse)
library(repeatData)
library(gt)
library(lme4)
library(emmeans)
library(pbkrtest)
library(gtsummary)
library(patchwork)
library(reporter)
library(jtools)




```

```{r}
#| message: false
#| echo: false
#| warning: false



## Correlation between blood removed and vo2max

# BV correlation
blood_removal <- blood.rm.data %>%
  select(id, test, bv) %>%
  pivot_wider(names_from = test,
              values_from = bv) %>%
  select(id, post.2.still, post.2.still.drained) %>%
  mutate(blood_rm = (post.2.still - post.2.still.drained)) %>%
  select(id, blood_rm)



# VO2 max

# Find the highest VO2 value at timepoints 2 or 3 for each ID and label it as "pre"
vo2_pre <- vo2max.data %>%
  filter(timepoint %in% c(2, 3)) %>%
  group_by(id) %>%
  summarize(VO2 = max(vo2, na.rm = TRUE)) %>%
  mutate(Timepoint = "pre") %>%
  ungroup()

# Assign "post" to timepoint 7 and "phle" to timepoint 8, then select relevant columns
vo2_postphle <- vo2max.data %>%
  filter(timepoint %in% c(7, 8)) %>%
  mutate(Timepoint = case_when(
    timepoint == 7 ~ "post",
    timepoint == 8 ~ "phle"
  )) %>%
  select(id, VO2 = vo2, Timepoint) %>% 
  pivot_wider(names_from = Timepoint,
              values_from = VO2)

# Combine the pre, post, and phle datasets into a final dataset for analysis
final_dataset <- merge(vo2_pre, vo2_postphle) %>% 
  pivot_wider(names_from = Timepoint,
              values_from = VO2) %>% 
  mutate(vo2_change =(phle - post))

  

# Merge the two datasets into one, by "id"
regression_table <- merge(blood_removal, final_dataset, by = "id")


# Fit a linear regression model
model <- lm(vo2_change ~ blood_rm, data = regression_table)


# Print a summary of the regression model
summary(model)


# Create a scatter plot with regression line, customize triangles for blood_rm = 0.00
ggplot(regression_table, aes(x = blood_rm, y = vo2_change, shape = factor(blood_rm <= 0.00))) +
  geom_point(size = 1) +
  geom_smooth(method = "lm", se = FALSE, color = "black") +
  geom_ribbon(aes(ymin = predict(model, regression_table, interval = "confidence")[, "lwr"],
                  ymax = predict(model, regression_table, interval = "confidence")[, "upr"]),
              fill = "grey", alpha = 0.2) +  # Add shaded area for confidence intervals
  labs(x = "Removed blood (mL)",
       y = "Change in VO2max") +
  scale_shape_manual(values = c("FALSE" = 16, "TRUE" = 17)) + # 16 is for circle, 17 is for triangle
  theme_minimal() +
  theme(
     panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(color = "black"),  # Set axis lines to black
    axis.text = element_text(size = 12),  # Increase axis text size
    axis.title = element_text(size = 14, face = "bold"),  # Increase axis title size and make it bold
    axis.ticks = element_line(color = "black", size = 0.5),  # Add ticks on the axis
    legend.position = "bottom"  # Move legend to the bottom
  ) +
   scale_y_continuous(breaks = seq(-400,220, 100)) +
  scale_x_continuous(breaks = seq(0,350, 50)) +
  guides(shape = FALSE)
```

```{r}
#| message: false
#| echo: false
#| warning: false



## Correlation between blood removed and PO 15min

# BV correlation 
blood_removal <- blood.rm.data %>%
  select(id, test, bv) %>%
  pivot_wider(names_from = test,
              values_from = bv) %>%
  select(id, post.2.still, post.2.still.drained) %>%
  mutate(blood_rm = (post.2.still - post.2.still.drained)) %>%
  select(id, blood_rm)

# PO 15min

# Find the highest VO2 value at timepoints 2 or 3 for each ID and label it as "pre"

per_pre <- performance.data %>%
  filter(timepoint %in% c(2, 3)) %>%
  group_by(id) %>%
  summarize(pre = max(watt, na.rm = TRUE)) %>%
  mutate(Timepoint = "pre") %>%
  ungroup()

# Assign "post" to timepoint 7 and "phle" to timepoint 8, then select relevant columns
per_postphle <- performance.data %>%
  filter(timepoint %in% c(7, 8)) %>%
  mutate(Timepoint = case_when(
    timepoint == 7 ~ "post",
    timepoint == 8 ~ "phle"
  )) %>% 
  select(id, watt = watt, Timepoint) %>% 
  pivot_wider(names_from = Timepoint,
              values_from = watt)

# Combine the pre, post, and phle datasets into a final dataset for analysis
 per_dataset <- merge(per_pre, per_postphle) %>% 
   select(- Timepoint) %>% 
  mutate(watt_change =(phle - post))
 
 # Merge the two datasets into one, by "id"
 final_per <- merge(per_dataset, blood_removal, by = "id")
 
# Fit a linear regression model
watt_mod <- lm(watt_change ~ blood_rm, data = final_per)

# Print a summary of the regression model
summary(watt_mod)

# Create a scatter plot with regression line, customize triangles for blood_rm = 0.00
ggplot(final_per, aes(x = blood_rm, y = watt_change, shape = factor(blood_rm <= 0.00))) +
  geom_point(size = 1) +
  geom_smooth(method = "lm", se = FALSE, color = "black") +
  geom_ribbon(aes(ymin = predict(watt_mod, final_per, interval = "confidence")[, "lwr"],
                  ymax = predict(watt_mod, final_per, interval = "confidence")[, "upr"]),
              fill = "grey", alpha = 0.2) +  # Add shaded area for confidence intervals
  labs(x = "Removed blood (mL)",
       y = "Change in mean PO15min") +
  scale_shape_manual(values = c("FALSE" = 16, "TRUE" = 17)) + # 16 is for circle, 17 is for triangle
  theme_minimal() +
  theme(
     panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(color = "black"),  # Set axis lines to black
    axis.text = element_text(size = 12),  # Increase axis text size
    axis.title = element_text(size = 14, face = "bold"),# Increase axis title size and make it bold
    axis.ticks = element_line(color = "black", size = 0.5),  # Add ticks on the axis
    legend.position = "bottom"  # Move legend to the bottom
  ) +
  scale_y_continuous(breaks = seq(-15,15, 5)) +
  scale_x_continuous(breaks = seq(0,350, 50)) +
  guides(shape = FALSE)

```
